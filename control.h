#ifndef CONTROL_H
#define CONTROL_H

#include "stm32f0xx.h"
#include "stm32f0xx_gpio.h"
#include "stm32f0xx_tim.h"
#include "stm32f0xx_rcc.h"
#include "stm32f0xx_usart.h"
#include "stm32f0xx_i2c.h"
#include "coOS.h"

#include "ahrsInterface.h"
#include "system.h"
#include "util.h"

union Register
{
	unsigned int Bits;
	float Data;
};

/* Defines functions related to comms with the Pi. Includes a watch dog timer
 * that lands the UAS if a valid command packet is not received
 * within a timeout when running in auto mode. */

// Control Packet PT byte masks
#define CONTROL_PACKET_PT_HAS_DATA					0x80
#define CONTROL_PACKET_PT_BAD_CHECKSUM_ERROR		0x02
#define CONTROL_PACKET_PT_ERROR						0x02
#define CONTROL_PACKET_PT_BATCH_LENGTH_BITS			0x0F
#define CONTROL_PACKET_PT_BATCH_LENGTH_BIT_3		0x08
#define CONTROL_PACKET_PT_BATCH_LENGTH_BIT_2		0x04
#define CONTROL_PACKET_PT_BATCH_LENGTH_BIT_1		0x02
#define CONTROL_PACKET_PT_BATCH_LENGTH_BIT_0		0x01


// Error codes. See documentation for more detail.
#define ERR_NO_AHRS_RESPONSE		0x11
#define ERR_NO_US_TOP_RESPONSE		0x12
#define ERR_NO_US_BOTTOM_RESPONSE	0x13
#define ERR_NO_US_FRONT_RESPONSE	0x14
#define ERR_NO_US_BACK_RESPONSE		0x15
#define ERR_NO_US_LEFT_RESPONSE		0x16
#define ERR_NO_US_RIGHT_RESPONSE	0x17
#define ERR_NO_PI_COMMS				0x18
#define ERR_NO_MOTOR_CONFIRMATION	0x19
#define ERR_AHRS_FAILED				0x21
#define ERR_TOP_US_FAILED			0x22
#define ERR_BOTTOM_US_FAILED		0x23
#define ERR_FRONT_US_FAILED			0x24
#define ERR_BACK_US_FAILED			0x25
#define ERR_LEFT_US_FAILED			0x26
#define ERR_RIGHT_US_FAILED			0x27


/* REGISTER MAP. DEFINES ADDRESS OF EVERY VARIABLE ACCESSIBLE REMOTELY.
 * ALL INTERNAL REFERENCES TO DATA IN THIS STRUCTURE SHOULD REFER BACK TO THIS.
 * POINTERS ARE USED IN SOME PLACES. */

// Config defines
#define REGISTER_MAP_LENGTH 				0x6E
#define AUTO_MODE_WHITELIST_LENGTH			5



// Control mode register masks
#define CONTROL_MODE_AUTO_MODE				0x00000001
#define CONTROL_MODE_HOVER_MODE				0x00000002

#define CONTROL_MODE_RUN_PITCH_RATE_PID		0x00000004
#define CONTROL_MODE_RUN_ROLL_RATE_PID		0x00000008
#define CONTROL_MODE_RUN_YAW_RATE_PID		0x00000010

#define CONTROL_MODE_RUN_PITCH_PID			0x00000020
#define CONTROL_MODE_RUN_ROLL_PID			0x00000040

#define CONTROL_MODE_RUN_X_VEL_PID			0x00000080
#define CONTROL_MODE_RUN_Y_VEL_PID			0x00000100
#define CONTROL_MODE_RUN_Z_VEL_PID			0x00000200

#define CONTROL_MODE_RUN_X_POS_PID			0x00000400
#define CONTROL_MODE_RUN_Y_POS_PID			0x00000800
#define CONTROL_MODE_RUN_Z_POS_PID			0x00001000
#define CONTROL_MODE_RUN_YAW_POS_PID		0x00002000

#define CONTROL_MODE_OVERIDE_MOTOR_CONTROL	0x00004000

#define CONTROL_MODE_CONFIRM_PI_COMMS		0x40000000
#define CONTROL_MODE_CONFIRM_MOTOR_TEST		0x80000000


// Status register bit masks
#define REGISTER_STATUS_IS_INITIALISED				0x80000000
#define REGISTER_STATUS_IS_WAITING_FOR_PI_READ		0x40000000
#define REGISTER_STATUS_IS_WAITING_FOR_MOTOR_CHECK	0x20000000

#define REGISTER_STATUS_IS_AUTO_LANDING				0x10000000

#define REGISTER_STATUS_US_TOP_STOP_TRIGGERED		0x00100000
#define REGISTER_STATUS_US_BOTTOM_STOP_TRIGGERED	0x00080000
#define REGISTER_STATUS_US_FRONT_STOP_TRIGGERED		0x00040000
#define REGISTER_STATUS_US_BACK_STOP_TRIGGERED		0x00020000
#define REGISTER_STATUS_US_LEFT_STOP_TRIGGERED		0x00010000
#define REGISTER_STATUS_US_RIGHT_STOP_TRIGGERED		0x00008000

#define REGISTER_STATUS_US_TOP_AVOID_TRIGGERED		0x00004000
#define REGISTER_STATUS_US_BOTTOM_AVOID_TRIGGERED	0x00002000
#define REGISTER_STATUS_US_FRONT_AVOID_TRIGGERED	0x00001000
#define REGISTER_STATUS_US_BACK_AVOID_TRIGGERED		0x00000800
#define REGISTER_STATUS_US_LEFT_AVOID_TRIGGERED		0x00000400
#define REGISTER_STATUS_US_RIGHT_AVOID_TRIGGERED	0x00000200

#define REGISTER_STATUS_IS_ERROR					0x00000100
#define REGISTER_STATUS_ERROR_CODE					0x000000FF

// Begin address map
// Loop 1 - Rotation rates
#define REGISTER_PITCH_RATE_PID_KP					0x00
#define REGISTER_PITCH_RATE_PID_KI					0x01
#define REGISTER_PITCH_RATE_PID_KD					0x02
#define REGISTER_PITCH_RATE_PID_UPDATE_TIME			0x03

#define REGISTER_ROLL_RATE_PID_KP					0x04
#define REGISTER_ROLL_RATE_PID_KI					0x05
#define REGISTER_ROLL_RATE_PID_KD					0x06
#define REGISTER_ROLL_RATE_PID_UPDATE_TIME			0x07

#define REGISTER_YAW_RATE_PID_KP					0x08
#define REGISTER_YAW_RATE_PID_KI					0x09
#define REGISTER_YAW_RATE_PID_KD					0x0A
#define REGISTER_YAW_RATE_PID_UPDATE_TIME			0x0B

// Loop 2 - Attitude
#define REGISTER_PITCH_PID_KP						0x0C
#define REGISTER_PITCH_PID_KI						0x0D
#define REGISTER_PITCH_PID_KD						0x0E
#define REGISTER_PITCH_PID_UPDATE_TIME				0x0F

#define REGISTER_ROLL_PID_KP						0x10
#define REGISTER_ROLL_PID_KI						0x11
#define REGISTER_ROLL_PID_KD						0x12
#define REGISTER_ROLL_PID_UPDATE_TIME				0x13

// Loop 3 - Velocity
#define REGISTER_X_VEL_PID_KP						0x14
#define REGISTER_X_VEL_PID_KI						0x15
#define REGISTER_X_VEL_PID_KD						0x16
#define REGISTER_X_VEL_PID_UPDATE_TIME				0x17

#define REGISTER_Y_VEL_PID_KP						0x18
#define REGISTER_Y_VEL_PID_KI						0x19
#define REGISTER_Y_VEL_PID_KD						0x1A
#define REGISTER_Y_VEL_PID_UPDATE_TIME				0x1B

#define REGISTER_Z_VEL_PID_KP						0x1C
#define REGISTER_Z_VEL_PID_KI						0x1D
#define REGISTER_Z_VEL_PID_KD						0x1E
#define REGISTER_Z_VEL_PID_UPDATE_TIME				0x1F

// Loop 4 - Position
#define REGISTER_X_POS_PID_KP						0x20
#define REGISTER_X_POS_PID_KI						0x21
#define REGISTER_X_POS_PID_KD						0x22
#define REGISTER_X_POS_PID_UPDATE_TIME				0x23

#define REGISTER_Y_POS_PID_KP						0x24
#define REGISTER_Y_POS_PID_KI						0x25
#define REGISTER_Y_POS_PID_KD						0x26
#define REGISTER_Y_POS_PID_UPDATE_TIME				0x27

#define REGISTER_Z_POS_PID_KP						0x28
#define REGISTER_Z_POS_PID_KI						0x29
#define REGISTER_Z_POS_PID_KD						0x2A
#define REGISTER_Z_POS_PID_UPDATE_TIME				0x2B

#define REGISTER_YAW_POS_PID_KP						0x2C
#define REGISTER_YAW_POS_PID_KI						0x2D
#define REGISTER_YAW_POS_PID_KD						0x2E
#define REGISTER_YAW_POS_PID_UPDATE_TIME			0x2F

// Sensors
#define REGISTER_AHRS_POLLING_PERIOD				0x30

#define REGISTER_ULTRASONIC_POLLING_PERIOD			0x31

#define REGISTER_ULTRASONIC_TOP_STOP_LIMIT			0x32
#define REGISTER_ULTRASONIC_BOTTOM_STOP_LIMIT		0x33
#define REGISTER_ULTRASONIC_FRONT_STOP_LIMIT		0x34
#define REGISTER_ULTRASONIC_BACK_STOP_LIMIT			0x35
#define REGISTER_ULTRASONIC_LEFT_STOP_LIMIT			0x36
#define REGISTER_ULTRASONIC_RIGHT_STOP_LIMIT		0x37

#define REGISTER_ULTRASONIC_TOP_AVOID_LIMIT			0x38
#define REGISTER_ULTRASONIC_BOTTOM_AVOID_LIMIT		0x39
#define REGISTER_ULTRASONIC_FRONT_AVOID_LIMIT		0x3A
#define REGISTER_ULTRASONIC_BACK_AVOID_LIMIT		0x3B
#define REGISTER_ULTRASONIC_LEFT_AVOID_LIMIT		0x3C
#define REGISTER_ULTRASONIC_RIGHT_AVOID_LIMIT		0x3D



// Data defines
#define REGISTER_CONTROL_MODE						0x40

// Loop 2 - Attitude
#define REGISTER_PITCH_PID_SET_POINT				0x41
#define REGISTER_ROLL_PID_SET_POINT					0x42

// Loop 1 - Rotation Rates
#define REGISTER_PITCH_RATE_PID_SET_POINT			0x43
#define REGISTER_ROLL_RATE_PID_SET_POINT			0x44
#define REGISTER_YAW_RATE_PID_SET_POINT				0x45

// Loop 3 - Velocity
#define REGISTER_X_VEL_PID_SET_POINT				0x46
#define REGISTER_Y_VEL_PID_SET_POINT				0x47
#define REGISTER_Z_VEL_PID_SET_POINT				0x48

// Loop 4 - Position
#define REGISTER_X_POS_PID_SET_POINT				0x49
#define REGISTER_Y_POS_PID_SET_POINT				0x4A
#define REGISTER_Z_POS_PID_SET_POINT				0x4B
#define REGISTER_YAW_POS_PID_SET_POINT				0x4C

// Loop 1 - Rotation Rate estimates
#define REGISTER_PITCH_RATE_ESTIMATE_LOCAL			0x4D
#define REGISTER_ROLL_RATE_ESTIMATE_LOCAL			0x4E
#define REGISTER_YAW_RATE_ESTIMATE_LOCAL			0x4F

// Loop 2 - Attitude estimates
#define REGISTER_PITCH_ESTIMATE_LOCAL				0x50
#define REGISTER_ROLL_ESTIMATE_LOCAL				0x51
#define REGISTER_YAW_ESTIMATE_LOCAL					0x52

// Loop 3 - Velocity estimates
#define REGISTER_X_VEL_ESTIMATE_LOCAL				0x53
#define REGISTER_Y_VEL_ESTIMATE_LOCAL				0x54
#define REGISTER_Z_VEL_ESTIMATE_LOCAL				0x55

// Loop 4 - Position estimates
#define REGISTER_X_POS_ESTIMATE_LOCAL				0x56
#define REGISTER_Y_POS_ESTIMATE_LOCAL				0x57
#define REGISTER_Z_POS_ESTIMATE_LOCAL				0x58

#define REGISTER_X_POS_ESTIMATE_GLOBAL				0x59	// Might not get used
#define REGISTER_Y_POS_ESTIMATE_GLOBAL				0x5A
#define REGISTER_Z_POS_ESTIMATE_GLOBAL				0x5B

// General odometry update time
#define REGISTER_ODOMETRY_UPDATE_TIME				0x5C

// Quaternion output, unused here.
#define REGISTER_QUATERNION_A						0x5D
#define REGISTER_QUATERNION_B						0x5E
#define REGISTER_QUATERNION_C						0x5F
#define REGISTER_QUATERNION_D						0x60

// Range sensors
#define REGISTER_ULTRASONIC_TOP_READING				0x61
#define REGISTER_ULTRASONIC_BOTTOM_READING			0x62
#define REGISTER_ULTRASONIC_FRONT_READING			0x63
#define REGISTER_ULTRASONIC_BACK_READING			0x64
#define REGISTER_ULTRASONIC_LEFT_READING			0x65
#define REGISTER_ULTRASONIC_RIGHT_READING			0x66

// Low level outputs
#define REGISTER_THRUST_OUTPUT						0x67
#define REGISTER_PITCH_RATE_OUTPUT					0x68
#define REGISTER_ROLL_RATE_OUTPUT					0x69
#define REGISTER_YAW_RATE_OUTPUT					0x6A

// Motor control signals for reference
#define REGISTER_MOTOR_1_PWM						0x6B
#define REGISTER_MOTOR_2_PWM						0x6C
#define REGISTER_MOTOR_3_PWM						0x6D
#define REGISTER_MOTOR_4_PWM						0x6E

// Status Register and Error info
#define REGISTER_STATUS								0x6F

/* Register map. Type is Register to allow float values to
 * be set as collections of bits, and allow bitwise storage.
 */
extern union Register RegisterMap[REGISTER_MAP_LENGTH];
extern uint8_t AutoModeAddressWhiteList[AUTO_MODE_WHITELIST_LENGTH];

struct PollingParameters
{
	OS_FlagID InitCompleteFlagID;
	OS_EventID DataSemaphoreID;
};

void runAHRSPolling(void * Parameters);
void runUltrasonicPolling(void * Parameters);

#endif

